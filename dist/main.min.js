(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("pickdate", [], factory);
	else if(typeof exports === 'object')
		exports["pickdate"] = factory();
	else
		root["pickdate"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	
	var fn01 = __webpack_require__(1).test1;
	// var monthsAbbr = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

	/**
	 * 基于模板进行渲染
	 * 1. 数据准备
	 * 2. 绑定事件
	 *
	 * 1. 先把日期渲染出来
	 * 2. 事件处理
	 * 3. 日期范围选择功能
	 * 4. 月份翻页
	 * 5. 事件回调
	 * 6. 日期最大值及最小值设置
	 * 7. 已选日期展示
	 * 8. 已选日期输入框change事件的处理
	 * 9. 对个日期面板展示
	 * 10. 单选日期
	 * 11. 日期格式化及日期操作函数的封装
	 * @param options
	 * @returns {{render: render}}
	 */
	function datePicker(options){
	    console.log(fn01());
	    return {
	        render: function(){

	        }
	    };
	}

	module.exports = datePicker;


/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = {
		add: function(a, b){
			return a + b;
		}
	};

/***/ }
/******/ ])
});
;