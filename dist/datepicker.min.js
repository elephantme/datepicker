(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("pickdate", [], factory);
	else if(typeof exports === 'object')
		exports["pickdate"] = factory();
	else
		root["pickdate"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	
	var commonUtils = __webpack_require__(1);
	var dateUtils = __webpack_require__(2);
	var calendar = __webpack_require__(3);

	function bindEvent() {

	}

	function unbindEvent() {

	}

	function getCalendarList(startTime, endTime) {

	}

	/**
	 * 基于模板进行渲染
	 * 1. 数据准备
	 * 2. 绑定事件
	 *
	 * 1. 先把日期渲染出来
	 * 2. 事件处理
	 * 3. 日期范围选择功能
	 * 4. 月份翻页
	 * 5. 事件回调
	 * 6. 日期最大值及最小值设置
	 * 7. 已选日期展示
	 * 8. 已选日期输入框change事件的处理
	 * 9. 对个日期面板展示
	 * 10. 单选日期
	 * 11. 日期格式化及日期操作函数的封装
	 * @param options
	 * @returns {{render: render}}
	 */
	function datePicker(options){
	    var defaults = {

	    };
	    // 配置
	    var configs =  commonUtils.extend(defaults, options);
	    var startDate = dateUtils.parse(configs.startTime);
	    var calendarElement = calendar.renderCalendar(startDate);

	    return {
	        render: function(){
	            options.el.appendChild(calendarElement);
	        }
	    };
	}

	module.exports = datePicker;


/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = {
	    extend: function (target, source) {
	        if(target == null) return source;
	        if(source == null) return target;
	        for(var prop in source) {
	            if(source.hasOwnProperty(prop)){
	                target[prop] = source[prop];
	            }
	        }
	        return target;
	    }
	};

/***/ },
/* 2 */
/***/ function(module, exports) {

	/**
	 * 不污染Date及prototype对象为原则
	 * @type {{add: module.exports.add}}
	 */
	module.exports = {
	    isDate: function (obj) {
	        return Object.prototype.toString(obj) == '[object Date]';
	    },
	    parse: function (str) {
	        return new Date(str);
	    },
	    today: function () {

	    },
	    getFirstDayOfDate: function (date) {
	        var cloned = this.clone(date);
	        cloned.setDate(1);
	        return cloned;
	    },
	    clone: function (date) {
	        return new Date(date.getTime());
	    },
	    add: function () {

	    },
	    addDays: function (date, num) {
	        date.setDate(date.getDate() + num);
	        return date;
	    },
	    compare: function () {

	    },

	};

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var dateUtils = __webpack_require__(2);

	var ROW_NUM = 6,
	    COL_NUM = 7,
	    TABLE = 'table',
	    THEAD = 'thead',
	    TBODY = 'tbody',
	    TH = 'th',
	    TR = 'tr',
	    TD = 'td',
	    A = 'a',
	    DIV = 'div',
	    CLASS_NAME_SPACE = 'pt-datepicker',
	    TABLE_CONTAINER_CLASS = 'content',
	    doc = document;

	var weekends = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];

	function getTHead(weekends){
	    var thead = doc.createElement(THEAD);
	    return weekends.reduce(function (head, w) {
	        var text = doc.createTextNode(w);
	        var th = doc.createElement(TH);
	        th.appendChild(text);
	        head.appendChild(th);
	        return head;
	    }, thead);
	}

	function getTBody(weeks){
	    var tbody = doc.createElement(TBODY);
	    weeks.forEach(function (rows) {
	        var tr = doc.createElement(TR);
	        rows.forEach(function (col) {
	            var td = doc.createElement(TD),
	                a = doc.createElement(A),
	                text = doc.createTextNode(col.getDate());
	            a.appendChild(text);
	            td.appendChild(a);
	            tr.appendChild(td);
	        });
	        tbody.appendChild(tr);
	    });
	    return tbody;
	}

	module.exports = {
	    getCalendarOfMonth: function (date) {
	        var weeks = [],
	            firstDayDate = dateUtils.getFirstDayOfDate(date), //该月的第一天
	            firstWeekDayNum = firstDayDate.getDay(), //该月的一个星期
	            curDate = dateUtils.addDays(dateUtils.clone(firstDayDate), -firstWeekDayNum); //循环遍历的开始日期

	        for (var i = 0; i < ROW_NUM; i++) {
	            var days = [];
	            for (var j = 0; j < COL_NUM; j++) {
	                days.push(curDate);
	                curDate = dateUtils.addDays(dateUtils.clone(curDate), 1);
	            }
	            weeks.push(days);
	        }

	        return {
	            month: date,
	            weeks: weeks
	        };
	    },

	    renderCalendarTable: function (weeks) {
	        var thead = getTHead(weekends),
	            tbody = getTBody(weeks),
	            table = doc.createElement(TABLE);
	        table.appendChild(thead);
	        table.appendChild(tbody);
	        return table;
	    },

	    renderCalendar: function (date) {
	        var container = doc.createElement(DIV),
	            tableContainer = doc.createElement(DIV),
	            calendar = this.getCalendarOfMonth(date),
	            table = this.renderCalendarTable(calendar.weeks);

	        container.setAttribute('class', CLASS_NAME_SPACE);
	        tableContainer.setAttribute('class', TABLE_CONTAINER_CLASS);
	        tableContainer.appendChild(table);
	        container.appendChild(tableContainer);
	        return container;
	    }
	};

/***/ }
/******/ ])
});
;